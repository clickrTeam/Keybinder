name: Build 

on:
  push:

env:
  QT_VERSION: 6.5.3

jobs:
  build-linux:
    name: Linux Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python and install aqt
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Qt via aqt
        run: |
          python -m pip install --upgrade pip
          pip install aqtinstall
          aqt install-qt linux desktop 6.5.3 gcc_64 -O ~/Qt

      - name: Install libevdev
        run: sudo apt install libevdev-dev
 
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_PREFIX_PATH=$HOME/Qt/6.5.3/gcc_64

      - name: Build
        run: cmake --build build --config Release

      - name: Upload keybinder binary
        uses: actions/upload-artifact@v4
        with:
          name: keybinder-linux
          path: build/keybinder

      - name: Copy and Upload Dependencies
        run: |
          EXECUTABLE="${{ github.workspace }}/build/keybinder"
          DEPLOY_DIR="${{ github.workspace }}/deploy"
          mkdir -p "$DEPLOY_DIR"

          ldd "$EXECUTABLE" \
            | grep "$HOME/Qt/6.5.3/gcc_64" \
            | awk '{print $3}' \
            | while read -r lib; do
                if [[ -f "$lib" ]]; then
                  cp -v "$lib" "$DEPLOY_DIR"
                fi
              done

          cp -v "$EXECUTABLE" "$DEPLOY_DIR"

      - name: Upload all Qt libraries (single artifact)
        uses: actions/upload-artifact@v4
        with:
          name: keybinder-linux-packed
          path: |
            ${{ github.workspace }}/deploy/**

  build-windows:
    name: Windows Build
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python and install aqt
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"

    # - name: Install Qt via aqt
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install aqtinstall
    #     aqt install-qt windows desktop 6.5.3 win64_msvc2019_64 -O C:\Qt

    - name: (3) Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version:      ${{ env.QT_VERSION }}
        host:         windows
        target:       desktop
        arch:         win64_msvc2019_64
        dir:          ${{ runner.temp }}
        modules:      qtcharts qt3d
        setup-python: false

        
    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: 2019
    
    - name: Configure CMake
      run: cmake -S . -B build -DCMAKE_PREFIX_PATH=C:\Qt\6.5.3\msvc2019_64

    - name: Build
      run: cmake --build build --config Release
    
    - name: Deploy Qt Dependencies
      run: |
        cd build\release
        windeployqt.exe keybinder.exe --release
    
    - name: Create Deployment Zip
      run: |
        mkdir deploy
        copy build\release\keybinder.exe deploy\
        windeployqt.exe deploy\keybinder.exe --release
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: keybinder-Windows
        path: deploy
    
    # - name: Upload to Release
    #   if: github.event_name == 'release'
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ github.event.release.upload_url }}
    #     asset_path: ./deploy/keybinder.zip
    #     asset_name: keybinder-Windows.zip
    #     asset_content_type: application/zip

  build-macos:
    name: macOS Build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Set up Python and install aqt
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Qt via aqt
        run: |
          python -m pip install --upgrade pip
          pip install aqtinstall
          aqt install-qt mac desktop 6.5.3 clang_64 -O ~/Qt

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_PREFIX_PATH=$HOME/Qt/6.5.3/macos

      - name: Build
        run: cmake --build build --config Release

      - name: Upload keybinder binary
        uses: actions/upload-artifact@v4
        with:
          name: keybinder-macos
          path: build/keybinder

      # --------------------------------------------------------------
      # 1️⃣  Gather macOS Qt frameworks & copy them next to the binary
      # --------------------------------------------------------------
      - name: Copy Qt frameworks
        id: copy-deps
        run: |
          # Create a folder that will hold the executable + its frameworks
          DEPLOY_DIR="${{ github.workspace }}/deploy"
          mkdir -p "$DEPLOY_DIR"

          # Path to the built executable
          EXECUTABLE="${{ github.workspace }}/build/keybinder"

          # Copy the executable itself
          cp -v "$EXECUTABLE" "$DEPLOY_DIR/"

          # Qt installation root
          QT_ROOT="$HOME/Qt/6.5.3/macos"

          # Find all Qt .framework bundles used by the binary
          otool -L "$EXECUTABLE" \
            | grep "$QT_ROOT" \
            | awk '{print $1}' \
            | while read -r framework_path; do
                # Resolve symlinks to the actual .framework directory
                real_path=$(readlink -f "$framework_path")
                # Copy the entire .framework bundle into the deploy folder
                cp -R "$real_path" "$DEPLOY_DIR/"
              done

      # --------------------------------------------------------------
      # 2️⃣  Upload everything as a single artifact
      # --------------------------------------------------------------
      - name: Upload macOS package (single artifact)
        uses: actions/upload-artifact@v4
        with:
          name: keybinder-macos-packed
          path: ${{ github.workspace }}/deploy/**

  post-gitlab-status:
    name: Post GitLab Status
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    if: always()
    steps:
      - name: Post GitLab commit status
        env:
          GITLAB_PAT: ${{ secrets.GITLAB_PAT }}
          GITHUB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          TARGET_COMMIT: ${{ github.sha }}
        run: |
          # Determine overall workflow status
          if [ "${{ needs.build-linux.result }}" = "success" ] && \
             [ "${{ needs.build-windows.result }}" = "success" ] && \
             [ "${{ needs.build-macos.result }}" = "success" ]; then
            STATE="success"
            DESCRIPTION="All builds succeeded"
          else
            STATE="failed"
            DESCRIPTION="One or more builds failed"
          fi
  
          curl --request POST \
            --header "PRIVATE-TOKEN: $GITLAB_PAT" \
            --header "Content-Type: application/json" \
            --data "{\"state\":\"$STATE\",\"description\":\"$DESCRIPTION\",\"context\":\"CI\",\"target_url\":\"$GITHUB_RUN_URL\"}" \
            "https://capstone.cs.utah.edu/api/v4/projects/113/statuses/$TARGET_COMMIT"
